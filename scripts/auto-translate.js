/**
 * Auto-translate script using LibreTranslate API
 * This script translates French content to English automatically
 * 
 * LibreTranslate is free and open-source
 * Public API: https://libretranslate.com (rate limited)
 * Or self-host: https://github.com/LibreTranslate/LibreTranslate
 */

import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// LibreTranslate API Configuration
const LIBRETRANSLATE_API = 'https://libretranslate.com/translate'
// You can also use: https://translate.argosopentech.com/translate (alternative free instance)
// Or self-host LibreTranslate for unlimited usage

/**
 * Translate text using LibreTranslate API
 */
async function translateText(text, sourceLang = 'fr', targetLang = 'en') {
  try {
    const response = await fetch(LIBRETRANSLATE_API, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        q: text,
        source: sourceLang,
        target: targetLang,
        format: 'text'
      })
    })

    if (!response.ok) {
      throw new Error(`Translation API error: ${response.statusText}`)
    }

    const data = await response.json()
    return data.translatedText
  } catch (error) {
    console.error(`Error translating "${text}":`, error.message)
    return text // Return original text if translation fails
  }
}

/**
 * Recursively translate an object
 */
async function translateObject(obj, sourceLang = 'fr', targetLang = 'en') {
  const translated = {}
  
  for (const [key, value] of Object.entries(obj)) {
    if (typeof value === 'string') {
      console.log(`Translating: ${value}`)
      translated[key] = await translateText(value, sourceLang, targetLang)
      // Add delay to avoid rate limiting (public API has limits)
      await new Promise(resolve => setTimeout(resolve, 500))
    } else if (typeof value === 'object' && value !== null) {
      translated[key] = await translateObject(value, sourceLang, targetLang)
    } else {
      translated[key] = value
    }
  }
  
  return translated
}

/**
 * Main translation function
 */
async function autoTranslate() {
  try {
    console.log('🚀 Starting auto-translation with LibreTranslate...\n')
    
    // Import French translations
    const frenchPath = path.join(__dirname, '../src/langs/french.js')
    const frenchModule = await import(`file://${frenchPath}`)
    const frenchTranslations = frenchModule.default
    
    console.log('📖 French translations loaded\n')
    
    // Translate to English
    console.log('🔄 Translating French to English...\n')
    const englishTranslations = await translateObject(frenchTranslations, 'fr', 'en')
    
    // Write to English file
    const englishPath = path.join(__dirname, '../src/langs/english.js')
    const englishContent = `// Auto-generated by auto-translate.js
// Last updated: ${new Date().toISOString()}

export default ${JSON.stringify(englishTranslations, null, 2)}
`
    
    fs.writeFileSync(englishPath, englishContent, 'utf8')
    
    console.log('\n✅ Translation complete!')
    console.log(`📝 English translations saved to: ${englishPath}`)
    console.log('\n💡 Tip: Review the translations and make manual adjustments if needed')
    
  } catch (error) {
    console.error('❌ Translation failed:', error)
    process.exit(1)
  }
}

// Run the translation
autoTranslate()
